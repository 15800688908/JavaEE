package cn.itcast.mydbutils;

import java.beans.BeanInfo;
import java.beans.IntrospectionException;
import java.beans.Introspector;
import java.beans.PropertyDescriptor;
import java.lang.reflect.Method;
import java.sql.ResultSet;
import java.sql.SQLException;

public class MyBeanHandler implements MyResultSetHandler {
	private Class clazz;

	public MyBeanHandler(Class clazz) {
		this.clazz = clazz;
	}

	public Object handle(ResultSet rs) throws SQLException {
		Object obj = null;
		try {
			BeanInfo bif = Introspector.getBeanInfo(clazz);
			PropertyDescriptor[] pds = bif.getPropertyDescriptors();

			if (rs.next()) {
				obj = clazz.newInstance();
				for (PropertyDescriptor pd : pds) {
					String name = pd.getName();
					Method setMethod = pd.getWriteMethod();
					if (setMethod != null)
						setMethod.invoke(obj, rs.getObject(name));
				}
			}
		} catch (IntrospectionException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return obj;
	}
	//从结果集方向封装
	public Object handle(ResultSet rs) throws SQLException {
		Object obj = null;
		try {
			BeanInfo bif = Introspector.getBeanInfo(clazz);
			PropertyDescriptor[] pds = bif.getPropertyDescriptors();

			if (rs.next()) {
				obj = clazz.newInstance();
				for (PropertyDescriptor pd : pds) {
					String name = pd.getName();
					Method setMethod = pd.getWriteMethod();
					if (setMethod != null)
						setMethod.invoke(obj, rs.getObject(name));
				}
			}
		} catch (IntrospectionException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return obj;
	}
}
